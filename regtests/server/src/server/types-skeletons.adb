--  REST API types validation
--  Types to validate
--
--  The version of the OpenAPI document: 1.0.0
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.11.0-2024-11-24.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with OpenAPI.Streams;
with OpenAPI.Servers.Operation;
package body Types.Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use OpenAPI.Streams;

   Media_List_1 : aliased constant OpenAPI.Mime_List :=
     (1 => OpenAPI.Mime_Json);

   package body Skeleton is

      package API_Add_Rack is new OpenAPI.Servers.Operation
        (Handler => Add_Rack,
         Method  => OpenAPI.Servers.POST,
         URI     => URI_Prefix & "/racks",
         Mimes   => Media_List_1'Access);

      --
      procedure Add_Rack
        (Req     : in out OpenAPI.Servers.Request'Class;
         Reply   : in out OpenAPI.Servers.Response'Class;
         Stream  : in out OpenAPI.Servers.Output_Stream'Class;
         Context : in out OpenAPI.Servers.Context_Type)
      is
         Input     : OpenAPI.Value_Type;
         Impl      : Implementation_Type;
         Rack_Info : RackInfo_Type;
         Result    : Types.Models.RackInfo_Type;
      begin

         OpenAPI.Servers.Read (Req, Media_List_1, Input);
         if OpenAPI.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         Types.Models.Deserialize (Input, "", Rack_Info);
         Impl.Add_Rack (Rack_Info, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Add_Rack;

      package API_Get_Rack is new OpenAPI.Servers.Operation
        (Handler => Get_Rack,
         Method  => OpenAPI.Servers.GET,
         URI     => URI_Prefix & "/racks/{name}",
         Mimes   => Media_List_1'Access);

      --
      procedure Get_Rack
        (Req     : in out OpenAPI.Servers.Request'Class;
         Reply   : in out OpenAPI.Servers.Response'Class;
         Stream  : in out OpenAPI.Servers.Output_Stream'Class;
         Context : in out OpenAPI.Servers.Context_Type)
      is
         Impl   : Implementation_Type;
         Name   : OpenAPI.Long;
         Result : Types.Models.RackInfo_Type;
      begin

         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Name);

         Impl.Get_Rack (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Get_Rack;

      package API_Update_Rack is new OpenAPI.Servers.Operation
        (Handler => Update_Rack,
         Method  => OpenAPI.Servers.PUT,
         URI     => URI_Prefix & "/racks/{name}",
         Mimes   => Media_List_1'Access);

      --
      procedure Update_Rack
        (Req     : in out OpenAPI.Servers.Request'Class;
         Reply   : in out OpenAPI.Servers.Response'Class;
         Stream  : in out OpenAPI.Servers.Output_Stream'Class;
         Context : in out OpenAPI.Servers.Context_Type)
      is
         Input     : OpenAPI.Value_Type;
         Impl      : Implementation_Type;
         Name      : OpenAPI.Long;
         Rack_Info : RackInfo_Type;
         Result    : Types.Models.RackInfo_Type;
      begin

         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Name);

         OpenAPI.Servers.Read (Req, Media_List_1, Input);
         if OpenAPI.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         Types.Models.Deserialize (Input, "", Rack_Info);
         Impl.Update_Rack (Name, Rack_Info, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Update_Rack;

      procedure Register
        (Server : in out OpenAPI.Servers.Application_Type'Class)
      is
      begin
         OpenAPI.Servers.Register (Server, API_Add_Rack.Definition);
         OpenAPI.Servers.Register (Server, API_Get_Rack.Definition);
         OpenAPI.Servers.Register (Server, API_Update_Rack.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is

      --
      procedure Add_Rack
        (Req     : in out OpenAPI.Servers.Request'Class;
         Reply   : in out OpenAPI.Servers.Response'Class;
         Stream  : in out OpenAPI.Servers.Output_Stream'Class;
         Context : in out OpenAPI.Servers.Context_Type)
      is
         Input     : OpenAPI.Value_Type;
         Rack_Info : RackInfo_Type;
         Result    : Types.Models.RackInfo_Type;
      begin

         OpenAPI.Servers.Read (Req, Media_List_1, Input);

         Types.Models.Deserialize (Input, "", Rack_Info);
         Server.Add_Rack (Rack_Info, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Add_Rack;

      package API_Add_Rack is new OpenAPI.Servers.Operation
        (Handler => Add_Rack,
         Method  => OpenAPI.Servers.POST,
         URI     => URI_Prefix & "/racks",
         Mimes   => Media_List_1'Access);

      --
      procedure Get_Rack
        (Req     : in out OpenAPI.Servers.Request'Class;
         Reply   : in out OpenAPI.Servers.Response'Class;
         Stream  : in out OpenAPI.Servers.Output_Stream'Class;
         Context : in out OpenAPI.Servers.Context_Type)
      is
         Name   : OpenAPI.Long;
         Result : Types.Models.RackInfo_Type;
      begin

         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Name);

         Server.Get_Rack (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Get_Rack;

      package API_Get_Rack is new OpenAPI.Servers.Operation
        (Handler => Get_Rack,
         Method  => OpenAPI.Servers.GET,
         URI     => URI_Prefix & "/racks/{name}",
         Mimes   => Media_List_1'Access);

      --
      procedure Update_Rack
        (Req     : in out OpenAPI.Servers.Request'Class;
         Reply   : in out OpenAPI.Servers.Response'Class;
         Stream  : in out OpenAPI.Servers.Output_Stream'Class;
         Context : in out OpenAPI.Servers.Context_Type)
      is
         Input     : OpenAPI.Value_Type;
         Name      : OpenAPI.Long;
         Rack_Info : RackInfo_Type;
         Result    : Types.Models.RackInfo_Type;
      begin

         OpenAPI.Servers.Get_Path_Parameter (Req, 1, Name);

         OpenAPI.Servers.Read (Req, Media_List_1, Input);

         Types.Models.Deserialize (Input, "", Rack_Info);
         Server.Update_Rack (Name, Rack_Info, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successful response");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;

      end Update_Rack;

      package API_Update_Rack is new OpenAPI.Servers.Operation
        (Handler => Update_Rack,
         Method  => OpenAPI.Servers.PUT,
         URI     => URI_Prefix & "/racks/{name}",
         Mimes   => Media_List_1'Access);

      procedure Register
        (Server : in out OpenAPI.Servers.Application_Type'Class)
      is
      begin
         OpenAPI.Servers.Register (Server, API_Add_Rack.Definition);
         OpenAPI.Servers.Register (Server, API_Get_Rack.Definition);
         OpenAPI.Servers.Register (Server, API_Update_Rack.Definition);
      end Register;

      protected body Server is
         --
         procedure Add_Rack
           (Rack_Info : in     RackInfo_Type;
            Result    :    out Types.Models.RackInfo_Type;
            Context   : in out OpenAPI.Servers.Context_Type)
         is
         begin
            Impl.Add_Rack (Rack_Info, Result, Context);
         end Add_Rack;

         --
         procedure Get_Rack
           (Name    : in     OpenAPI.Long;
            Result  :    out Types.Models.RackInfo_Type;
            Context : in out OpenAPI.Servers.Context_Type)
         is
         begin
            Impl.Get_Rack (Name, Result, Context);
         end Get_Rack;

         --
         procedure Update_Rack
           (Name      : in     OpenAPI.Long;
            Rack_Info : in     RackInfo_Type;
            Result    :    out Types.Models.RackInfo_Type;
            Context   : in out OpenAPI.Servers.Context_Type)
         is
         begin
            Impl.Update_Rack (Name, Rack_Info, Result, Context);
         end Update_Rack;

      end Server;

   end Shared_Instance;

end Types.Skeletons;
