--  REST API Validation
--  API to validate
--
--  The version of the OpenAPI document: 1.0.0
--  Contact: Stephane.Carrez@gmail.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.11.0-2024-11-24.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with OpenAPI.Streams;
package body TestAPI.Clients is
   pragma Style_Checks ("-bmrIu");

   Media_List_1 : constant OpenAPI.Mime_List := (1 => OpenAPI.Mime_Json);
   Media_List_2 : constant OpenAPI.Mime_List := (1 => OpenAPI.Mime_Text);
   Media_List_3 : constant OpenAPI.Mime_List := (1 => OpenAPI.Mime_Form);

   --
   --  Query an orchestrated service instance
   procedure Orch_Store
     (Client             : in out Client_Type;
      Orch_Store_Request : in     TestAPI.Models.OrchStoreRequest_Type)
   is
      URI : OpenAPI.Clients.URI_Type;
      Req : OpenAPI.Clients.Request_Type;
   begin
      Client.Initialize (Req, Media_List_1);
      TestAPI.Models.Serialize (Req.Stream, "", Orch_Store_Request);

      URI.Set_Path ("/orchestration");
      Client.Call (OpenAPI.Clients.POST, URI, Req);
   end Orch_Store;

   --
   procedure Test_Int
     (Client  : in out Client_Type;
      Options : in     OpenAPI.Nullable_UString;
      Result  :    out TestAPI.Models.IntStruct_Type)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);

      URI.Add_Param ("options", Options);
      URI.Set_Path ("/testInt");
      Client.Call (OpenAPI.Clients.GET, URI, Reply);
      TestAPI.Models.Deserialize (Reply, "", Result);
   end Test_Int;

   --
   procedure Test_Text_Response
     (Client  : in out Client_Type;
      Options : in     OpenAPI.Nullable_UString;
      Result  :    out OpenAPI.UString)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_2);

      URI.Add_Param ("options", Options);
      URI.Set_Path ("/testTextResponse");
      Client.Call (OpenAPI.Clients.GET, URI, Reply);
      OpenAPI.Streams.Deserialize (Reply, "", Result);
   end Test_Text_Response;

   --  Create a ticket
   procedure Do_Create_Ticket
     (Client      : in out Client_Type;
      Title       : in     OpenAPI.UString;
      Owner       : in     OpenAPI.Nullable_UString;
      Status      : in     OpenAPI.Nullable_UString;
      Description : in     OpenAPI.Nullable_UString)
   is
      URI : OpenAPI.Clients.URI_Type;
      Req : OpenAPI.Clients.Request_Type;
   begin

      Client.Initialize (Req, Media_List_3);
      Req.Stream.Write_Entity ("owner", Owner);
      Req.Stream.Write_Entity ("status", Status);
      Req.Stream.Write_Entity ("title", Title);
      Req.Stream.Write_Entity ("description", Description);

      URI.Set_Path ("/tickets");
      Client.Call (OpenAPI.Clients.POST, URI, Req);
   end Do_Create_Ticket;

   --  Delete a ticket
   procedure Do_Delete_Ticket
     (Client : in out Client_Type; Tid : in OpenAPI.Long)
   is
      URI : OpenAPI.Clients.URI_Type;
   begin

      URI.Set_Path ("/tickets/{tid}");
      URI.Set_Path_Param ("tid", OpenAPI.To_String (Tid));
      Client.Call (OpenAPI.Clients.DELETE, URI);
   end Do_Delete_Ticket;

   --  List the tickets
   procedure Do_Head_Ticket (Client : in out Client_Type) is
      URI : OpenAPI.Clients.URI_Type;
   begin

      URI.Set_Path ("/tickets");
      Client.Call (OpenAPI.Clients.HEAD, URI);
   end Do_Head_Ticket;

   --  Patch a ticket
   procedure Do_Patch_Ticket
     (Client      : in out Client_Type;
      Tid         : in     OpenAPI.Long;
      Owner       : in     OpenAPI.Nullable_UString;
      Status      : in     OpenAPI.Nullable_UString;
      Title       : in     OpenAPI.Nullable_UString;
      Description : in     OpenAPI.Nullable_UString;
      Result      :    out TestAPI.Models.Ticket_Type)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Req   : OpenAPI.Clients.Request_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);

      Client.Initialize (Req, Media_List_3);
      Req.Stream.Write_Entity ("owner", Owner);
      Req.Stream.Write_Entity ("status", Status);
      Req.Stream.Write_Entity ("title", Title);
      Req.Stream.Write_Entity ("description", Description);

      URI.Set_Path ("/tickets/{tid}");
      URI.Set_Path_Param ("tid", OpenAPI.To_String (Tid));
      Client.Call (OpenAPI.Clients.PATCH, URI, Req, Reply);
      TestAPI.Models.Deserialize (Reply, "", Result);
   end Do_Patch_Ticket;

   --  Update a ticket
   procedure Do_Update_Ticket
     (Client      : in out Client_Type;
      Tid         : in     OpenAPI.Long;
      Owner       : in     OpenAPI.Nullable_UString;
      Status      : in     OpenAPI.Nullable_UString;
      Title       : in     OpenAPI.Nullable_UString;
      Description : in     OpenAPI.Nullable_UString;
      Result      :    out TestAPI.Models.Ticket_Type)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Req   : OpenAPI.Clients.Request_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);

      Client.Initialize (Req, Media_List_3);
      Req.Stream.Write_Entity ("owner", Owner);
      Req.Stream.Write_Entity ("status", Status);
      Req.Stream.Write_Entity ("title", Title);
      Req.Stream.Write_Entity ("description", Description);

      URI.Set_Path ("/tickets/{tid}");
      URI.Set_Path_Param ("tid", OpenAPI.To_String (Tid));
      Client.Call (OpenAPI.Clients.PUT, URI, Req, Reply);
      TestAPI.Models.Deserialize (Reply, "", Result);
   end Do_Update_Ticket;

   --  Get a ticket
   --  Get a ticket
   procedure Do_Get_Ticket
     (Client : in out Client_Type;
      Tid    : in     OpenAPI.Long;
      Result :    out TestAPI.Models.Ticket_Type)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);

      URI.Set_Path ("/tickets/{tid}");
      URI.Set_Path_Param ("tid", OpenAPI.To_String (Tid));
      Client.Call (OpenAPI.Clients.GET, URI, Reply);
      TestAPI.Models.Deserialize (Reply, "", Result);
   end Do_Get_Ticket;

   --  List the tickets
   --  List the tickets created for the project.
   procedure Do_List_Tickets
     (Client : in out Client_Type;
      Status : in     OpenAPI.Nullable_UString;
      Owner  : in     OpenAPI.Nullable_UString;
      Result :    out TestAPI.Models.Ticket_Type_Vectors.Vector)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);

      URI.Add_Param ("status", Status);
      URI.Add_Param ("owner", Owner);
      URI.Set_Path ("/tickets");
      Client.Call (OpenAPI.Clients.GET, URI, Reply);
      TestAPI.Models.Deserialize (Reply, "", Result);
   end Do_List_Tickets;

   --  Get a ticket
   --  Get a ticket
   procedure Do_Options_Ticket
     (Client : in out Client_Type;
      Tid    : in     OpenAPI.Long;
      Result :    out TestAPI.Models.Ticket_Type)
   is
      URI   : OpenAPI.Clients.URI_Type;
      Reply : OpenAPI.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);

      URI.Set_Path ("/tickets/{tid}");
      URI.Set_Path_Param ("tid", OpenAPI.To_String (Tid));
      Client.Call (OpenAPI.Clients.OPTIONS, URI, Reply);
      TestAPI.Models.Deserialize (Reply, "", Result);
   end Do_Options_Ticket;
end TestAPI.Clients;
